#
#          Copyright Andrey Semashev 2007 - 2014.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#
# The file was adapted from libs/tr2/test/Jamfile.v2 by John Maddock.

import testing ;
import path ;

project
    : requirements
        <include>common
        <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
        <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
        <toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
        <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
        <toolset>msvc:<cxxflags>/bigobj
        <toolset>msvc:<cxxflags>/wd4503 # decorated name length exceeded, name was truncated
        <toolset>intel-win:<define>_SCL_SECURE_NO_WARNINGS
        <toolset>intel-win:<define>_SCL_SECURE_NO_DEPRECATE
        <toolset>intel-win:<define>_CRT_SECURE_NO_WARNINGS
        <toolset>intel-win:<define>_CRT_SECURE_NO_DEPRECATE
        <toolset>darwin:<cxxflags>-ftemplate-depth-1024
        <toolset>gcc:<cxxflags>-ftemplate-depth-1024
        <toolset>gcc:<cxxflags>-fno-strict-aliasing  # avoids strict aliasing violations in other Boost components
        <library>/boost/log//boost_log
        <library>/boost/log//boost_log_setup
        <library>/boost/date_time//boost_date_time
        <library>/boost/regex//boost_regex
        <library>/boost/filesystem//boost_filesystem
        <library>/boost/system//boost_system
        <library>/boost/test//boost_unit_test_framework
        <threading>single:<define>BOOST_LOG_NO_THREADS
        <threading>multi:<library>/boost/thread//boost_thread
    : default-build
        # Testers typically don't specify threading environment and the library can be built and tested for single and multi. I'm more interested in multi though.
        <threading>multi
#        <link>static
    ;

# this rule enumerates through all the sources and invokes
# the run rule for each source, the result is a list of all
# the run rules, which we can pass on to the test_suite rule:
rule test_all
{
   local all_rules = ;
   local file ;
   local headers_path = [ path.make $(BOOST_ROOT)/libs/log/include/boost/log ] ;
   for file in [ path.glob-tree $(headers_path) : *.hpp ]
   {
      local rel_file = [ path.relative-to $(headers_path) $(file) ] ;
      if ! [ MATCH "detail/(.*)" : $(rel_file) ]
      {
          #ECHO $(rel_file) ;
          all_rules += [ compile compile/self_contained_header.cpp : <define>"BOOST_LOG_TEST_HEADER=$(rel_file)" : self_contained_header/$(rel_file) ] ;
      }
   }
   for file in [ glob compile/*.cpp ]
   {
      if [ path.basename $(file) ] != "self_contained_header.cpp"
      {
          all_rules += [ compile $(file) ] ;
      }
   }
   for file in [ glob compile_fail/*.cpp ]
   {
      all_rules += [ compile-fail $(file) ] ;
   }
   for file in [ glob run/*.cpp ]
   {
      all_rules += [ run $(file) ] ;
   }

   #ECHO All rules: $(all_rules) ;
   return $(all_rules) ;
}

test-suite log : [ test_all r ] [ build-project ../example ] ;
